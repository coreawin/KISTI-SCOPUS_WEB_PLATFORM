/*생성된 Build테이블 이름을 교체하고 제약조건 및 인덱스를 생성합니다.*/

-- SCOPUS_DOCUMENT
DROP TABLE OLD_SCOPUS_DOCUMENT CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_DOCUMENT rename to OLD_SCOPUS_DOCUMENT;
ALTER TABLE BU_SCOPUS_DOCUMENT rename to SCOPUS_DOCUMENT;

ALTER TABLE SCOPUS_DOCUMENT DROP CONSTRAINT SPKSCOPUS_DOCUMENT;
ALTER TABLE SCOPUS_DOCUMENT ADD CONSTRAINT SPKSCOPUS_DOCUMENT PRIMARY KEY (eid);

ALTER TABLE SCOPUS_DOCUMENT DROP CONSTRAINT SFKSD_CT;
ALTER TABLE SCOPUS_DOCUMENT ADD CONSTRAINT SFKSD_CT FOREIGN KEY (citation_type) 
			REFERENCES SCOPUS_CITATION_TYPE(citation_type) ON DELETE SET NULL;

DROP INDEX SIDX_SDPYEAR ON SCOPUS_DOCUMENT;
CREATE INDEX SIDX_SDPYEAR ON SCOPUS_DOCUMENT (
	"PUBLICATION_YEAR" DESC
);

DROP INDEX SIDX_SDSID ON SCOPUS_DOCUMENT;
CREATE INDEX SIDX_SDSID ON SCOPUS_DOCUMENT (
	"SOURCE_ID"
);

DROP INDEX SIDX_SDRC ON SCOPUS_DOCUMENT;
CREATE INDEX SIDX_SDRC ON SCOPUS_DOCUMENT (
	"REF_COUNT" DESC
);

DROP INDEX SIDX_SDCC ON SCOPUS_DOCUMENT;
CREATE INDEX SIDX_SDCC ON SCOPUS_DOCUMENT (
	"CIT_COUNT" DESC
);


-- SCOPUS_DOCUMENT_STATUS
DROP TABLE OLD_SCOPUS_DOCUMENT_STATUS CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_DOCUMENT_STATUS rename to OLD_SCOPUS_DOCUMENT_STATUS;
ALTER TABLE BU_SCOPUS_DOCUMENT_STATUS rename to SCOPUS_DOCUMENT_STATUS;

ALTER TABLE SCOPUS_DOCUMENT_STATUS DROP CONSTRAINT SPKSCOPUS_DOCUMENT_STATUS;
ALTER TABLE SCOPUS_DOCUMENT_STATUS ADD CONSTRAINT SPKSCOPUS_DOCUMENT_STATUS PRIMARY KEY (eid);

DROP INDEX SIDX_SDSSTATE ON SCOPUS_DOCUMENT_STATUS;
CREATE INDEX SIDC_SDSSTATE ON SCOPUS_DOCUMENT_STATUS (
	"STATE"
);

-- SCOPUS_AUTHOR_KEYWORD
DROP TABLE OLD_SCOPUS_AUTHOR_KEYWORD CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_AUTHOR_KEYWORD rename to OLD_SCOPUS_AUTHOR_KEYWORD;
ALTER TABLE BU_SCOPUS_AUTHOR_KEYWORD rename to SCOPUS_AUTHOR_KEYWORD;

ALTER TABLE SCOPUS_AUTHOR_KEYWORD DROP CONSTRAINT SPKSCOPUS_DOCUMENT_STATUS;
ALTER TABLE SCOPUS_AUTHOR_KEYWORD ADD CONSTRAINT SPKSCOPUS_DOCUMENT_STATUS PRIMARY KEY (author_keyword_seq);

ALTER TABLE SCOPUS_AUTHOR_KEYWORD DROP CONSTRAINT SFKSAK_EID;
ALTER TABLE SCOPUS_AUTHOR_KEYWORD ADD CONSTRAINT SFKSAK_EID FOREIGN KEY (eid) 
			REFERENCES SCOPUS_DOCUMENT(eid) ON DELETE SET NULL;

DROP INDEX SIDX_SAKEID ON SCOPUS_AUTHOR_KEYWORD;
CREATE INDEX SIDX_SAKEID ON SCOPUS_AUTHOR_KEYWORD (
	"EID"
);
DROP INDEX SIDX_SAKKEY ON SCOPUS_AUTHOR_KEYWORD;
CREATE INDEX SIDX_SAKKEY ON SCOPUS_AUTHOR_KEYWORD (
	"KEYWORD"
);

-- SCOPUS_INDEX_KEYWORD
DROP TABLE OLD_SCOPUS_INDEX_KEYWORD CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_INDEX_KEYWORD rename to OLD_SCOPUS_INDEX_KEYWORD;
ALTER TABLE BU_SCOPUS_INDEX_KEYWORD rename to SCOPUS_INDEX_KEYWORD;

ALTER TABLE SCOPUS_INDEX_KEYWORD DROP CONSTRAINT SPKSCOPUS_INDEX_KEYWORD;
ALTER TABLE SCOPUS_INDEX_KEYWORD ADD CONSTRAINT SPKSCOPUS_INDEX_KEYWORD PRIMARY KEY (author_keyword_seq);

ALTER TABLE SCOPUS_INDEX_KEYWORD DROP CONSTRAINT SFKSIK_EID;
ALTER TABLE SCOPUS_INDEX_KEYWORD ADD CONSTRAINT SFKSIK_EID FOREIGN KEY (eid) 
			REFERENCES SCOPUS_DOCUMENT(eid) ON DELETE SET NULL;

DROP INDEX SIDX_SIKEID ON SCOPUS_INDEX_KEYWORD;
CREATE INDEX SIDX_SIKEID ON SCOPUS_INDEX_KEYWORD (
	"EID"
);
DROP INDEX SIDX_SIKTYPE ON SCOPUS_INDEX_KEYWORD;
CREATE INDEX SIDX_SIKTYPE ON SCOPUS_INDEX_KEYWORD (
	"TYPE"
);
DROP INDEX SIDX_SIKKEY ON SCOPUS_INDEX_KEYWORD;
CREATE INDEX SIDX_SIKKEY ON SCOPUS_INDEX_KEYWORD (
	"KEYWORD"
);

-- SCOPUS_CLASSIFICATION_ASJC
DROP TABLE OLD_SCOPUS_CLASSIFICATION_ASJC CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_CLASSIFICATION_ASJC rename to OLD_SCOPUS_CLASSIFICATION_ASJC;
ALTER TABLE BU_SCOPUS_CLASSIFICATION_ASJC rename to SCOPUS_CLASSIFICATION_ASJC;

ALTER TABLE SCOPUS_CLASSIFICATION_ASJC DROP CONSTRAINT SPKSCA;
ALTER TABLE SCOPUS_CLASSIFICATION_ASJC ADD CONSTRAINT SPKSCA PRIMARY KEY (eid,asjc_code);

ALTER TABLE SCOPUS_CLASSIFICATION_ASJC DROP CONSTRAINT SFKSCA_EID;
ALTER TABLE SCOPUS_CLASSIFICATION_ASJC ADD CONSTRAINT SFKSCA_EID FOREIGN KEY (eid) 
			REFERENCES SCOPUS_DOCUMENT(eid) ON DELETE SET NULL;
			
ALTER TABLE SCOPUS_CLASSIFICATION_ASJC DROP CONSTRAINT SFKSCA_ASJC;
ALTER TABLE SCOPUS_CLASSIFICATION_ASJC ADD CONSTRAINT SFKSCA_ASJC FOREIGN KEY (asjc_code) 
			REFERENCES SCOPUS_ASJC(eid) ON DELETE SET NULL;
			
-- SCOPUS_AUTHOR
DROP TABLE OLD_SCOPUS_AUTHOR CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_AUTHOR rename to OLD_SCOPUS_AUTHOR;
ALTER TABLE BU_SCOPUS_AUTHOR rename to SCOPUS_AUTHOR;

ALTER TABLE SCOPUS_AUTHOR DROP CONSTRAINT SPKSCOPUS_AUTHOR;
ALTER TABLE SCOPUS_AUTHOR ADD CONSTRAINT SPKSCOPUS_AUTHOR PRIMARY KEY (author_seq);

DROP INDEX SIDX_SAEID ON SCOPUS_AUTHOR;
CREATE INDEX SIDX_SAEID ON SCOPUS_AUTHOR (
	"EID"
);
DROP INDEX SIDX_SAGS ON SCOPUS_AUTHOR;
CREATE INDEX SIDX_SAGS ON SCOPUS_AUTHOR (
	"GROUP_SEQUENCE"
);
DROP INDEX SIDX_SAAI ON SCOPUS_AUTHOR;
CREATE INDEX SIDX_SAAI ON SCOPUS_AUTHOR (
	"AUTHOR_ID"
);
DROP INDEX SIDX_SAAN ON SCOPUS_AUTHOR;
CREATE INDEX SIDX_SAAN ON SCOPUS_AUTHOR (
	"AUTHOR_NAME"
);


-- SCOPUS_AUTHOR_ID_INFO
DROP TABLE OLD_SCOPUS_AUTHOR_ID_INFO CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_AUTHOR_ID_INFO rename to OLD_SCOPUS_AUTHOR_ID_INFO;
ALTER TABLE BU_SCOPUS_AUTHOR_ID_INFO rename to SCOPUS_AUTHOR_ID_INFO;

ALTER TABLE SCOPUS_AUTHOR_ID_INFO DROP CONSTRAINT SPKSCOPUS_AUTHOR_ID_INFO;
ALTER TABLE SCOPUS_AUTHOR_ID_INFO ADD CONSTRAINT SPKSCOPUS_AUTHOR_ID_INFO PRIMARY KEY (eid, group_sequence, author_id);

DROP INDEX SIDX_SAIIEID ON SCOPUS_AUTHOR_ID_INFO;
CREATE INDEX SIDX_SAIIEID ON SCOPUS_AUTHOR_ID_INFO (
	"EID"
);
DROP INDEX SIDX_SAIIGS ON SCOPUS_AUTHOR_ID_INFO;
CREATE INDEX SIDX_SAIIGS ON SCOPUS_AUTHOR_ID_INFO (
	"GROUP_SEQUENCE"
);
DROP INDEX SIDX_SAIIAI ON SCOPUS_AUTHOR_ID_INFO;
CREATE INDEX SIDX_SAIIAI ON SCOPUS_AUTHOR_ID_INFO (
	"AUTHOR_ID"
);
DROP INDEX SIDX_SAIIAN ON SCOPUS_AUTHOR_ID_INFO;
CREATE INDEX SIDX_SAIIAN ON SCOPUS_AUTHOR_ID_INFO (
	"AUTHOR_NAME"
;

-- SCOPUS_CORRESPOND_AUTHOR
DROP TABLE OLD_SCOPUS_CORRESPOND_AUTHOR CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_CORRESPOND_AUTHOR rename to OLD_SCOPUS_CORRESPOND_AUTHOR;
ALTER TABLE BU_SCOPUS_CORRESPOND_AUTHOR rename to SCOPUS_CORRESPOND_AUTHOR;

ALTER TABLE SCOPUS_CORRESPOND_AUTHOR DROP CONSTRAINT SPKSCOPUS_CORRESPOND_AUTHOR;
ALTER TABLE SCOPUS_CORRESPOND_AUTHOR ADD CONSTRAINT SPKSCOPUS_CORRESPOND_AUTHOR PRIMARY KEY (eid);

ALTER TABLE SCOPUS_CORRESPOND_AUTHOR DROP CONSTRAINT SFKSCA_EID;
ALTER TABLE SCOPUS_CORRESPOND_AUTHOR ADD CONSTRAINT SFKSCA_EID FOREIGN KEY (eid) 
			REFERENCES SCOPUS_DOCUMENT(eid) ON DELETE SET NULL;
			
ALTER TABLE SCOPUS_CORRESPOND_AUTHOR DROP CONSTRAINT SFKSCA_ASEQ;
ALTER TABLE SCOPUS_CORRESPOND_AUTHOR ADD CONSTRAINT SFKSCA_ASEQ FOREIGN KEY (author_seq) 
			REFERENCES SCOPUS_AUTHOR(author_seq) ON DELETE SET NULL;
			
ALTER TABLE SCOPUS_CORRESPOND_AUTHOR DROP CONSTRAINT SFKSCA_ACC;
ALTER TABLE SCOPUS_CORRESPOND_AUTHOR ADD CONSTRAINT SFKSCA_ACC FOREIGN KEY (country_code) 
			REFERENCES SCOPUS_COUNTRY_CODE(country_code) ON DELETE SET NULL;

DROP INDEX SIDX_SCASEQ ON SCOPUS_CORRESPOND_AUTHOR;
CREATE INDEX SIDX_SCASEQ ON SCOPUS_CORRESPOND_AUTHOR (
	"AUTHOR_SEQ"
);


-- SCOPUS_CITATION
DROP TABLE OLD_SCOPUS_CITATION CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_CITATION rename to OLD_SCOPUS_CITATION;
ALTER TABLE BU_SCOPUS_CITATION rename to SCOPUS_CITATION;

ALTER TABLE SCOPUS_CITATION DROP CONSTRAINT SPKSCOPUS_CITATION;
ALTER TABLE SCOPUS_CITATION ADD CONSTRAINT SPKSCOPUS_CITATION PRIMARY KEY (eid,cit_eid);

ALTER TABLE SCOPUS_CITATION DROP CONSTRAINT SFKSC_EID;
ALTER TABLE SCOPUS_CITATION ADD CONSTRAINT SFKSC_EID FOREIGN KEY (eid) 
			REFERENCES SCOPUS_DOCUMENT(eid) ON DELETE SET NULL;
			
DROP INDEX SIDX_SCEID ON SCOPUS_CITATION;
CREATE INDEX SIDX_SCEID ON SCOPUS_CITATION (
	"EID"
);
DROP INDEX SIDX_SCCEID ON SCOPUS_CITATION;
CREATE INDEX SIDX_SCCEID ON SCOPUS_CITATION (
	"CIT_EID"
);

-- SCOPUS_REFERENCE
DROP TABLE OLD_SCOPUS_REFERENCE CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_REFERENCE rename to OLD_SCOPUS_REFERENCE;
ALTER TABLE BU_SCOPUS_REFERENCE rename to SCOPUS_REFERENCE;

ALTER TABLE SCOPUS_REFERENCE DROP CONSTRAINT SPKSCOPUS_REFERENCE;
ALTER TABLE SCOPUS_REFERENCE ADD CONSTRAINT SPKSCOPUS_REFERENCE PRIMARY KEY (eid,ref_eid);

ALTER TABLE SCOPUS_REFERENCE DROP CONSTRAINT SFKSR_EID;
ALTER TABLE SCOPUS_REFERENCE ADD CONSTRAINT SFKSR_EID FOREIGN KEY (eid) 
			REFERENCES SCOPUS_DOCUMENT(eid) ON DELETE SET NULL;
			
DROP INDEX SIDX_SREID ON SCOPUS_REFERENCE;
CREATE INDEX SIDX_SREID ON SCOPUS_REFERENCE (
	"EID"
);
DROP INDEX SIDX_SRREID ON SCOPUS_REFERENCE;
CREATE INDEX SIDX_SRREID ON SCOPUS_REFERENCE (
	"REF_EID"
);

-- SCOPUS_AFFILATION_GROUP
DROP TABLE OLD_SCOPUS_AFFILATION_GROUP CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_AFFILATION_GROUP rename to OLD_SCOPUS_AFFILATION_GROUP;
ALTER TABLE BU_SCOPUS_AFFILATION_GROUP rename to SCOPUS_AFFILATION_GROUP;

ALTER TABLE SCOPUS_AFFILATION_GROUP DROP CONSTRAINT SPKSCOPUS_AFFILATION_GROUP;
ALTER TABLE SCOPUS_AFFILATION_GROUP ADD CONSTRAINT SPKSCOPUS_AFFILATION_GROUP PRIMARY KEY (eid,group_sequence);

ALTER TABLE SCOPUS_AFFILATION_GROUP DROP CONSTRAINT SFKSAG_EID;
ALTER TABLE SCOPUS_AFFILATION_GROUP ADD CONSTRAINT SFKSAG_EID FOREIGN KEY (eid) 
			REFERENCES SCOPUS_DOCUMENT(eid) ON DELETE SET NULL;
			
ALTER TABLE SCOPUS_AFFILATION_GROUP DROP CONSTRAINT SFKSAG_CC;
ALTER TABLE SCOPUS_AFFILATION_GROUP ADD CONSTRAINT SFKSAG_CC FOREIGN KEY (country_code) 
			REFERENCES SCOPUS_COUNTRY_CODE(country_code) ON DELETE SET NULL;
			
DROP INDEX SIDX_SAGEID ON SCOPUS_AFFILATION_GROUP;
CREATE INDEX SIDX_SAGEID ON SCOPUS_AFFILATION_GROUP (
	"EID"
);
DROP INDEX SIDX_SAGAFID ON SCOPUS_AFFILATION_GROUP;
CREATE INDEX SIDX_SAGAFID ON SCOPUS_AFFILATION_GROUP (
	"AFID"
);

-- SCOPUS_AUTHOR_GROUP
DROP TABLE OLD_SCOPUS_AUTHOR_GROUP CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_AUTHOR_GROUP rename to OLD_SCOPUS_AUTHOR_GROUP;
ALTER TABLE BU_SCOPUS_AUTHOR_GROUP rename to SCOPUS_AUTHOR_GROUP;

ALTER TABLE SCOPUS_AUTHOR_GROUP DROP CONSTRAINT SPKSCOPUS_AUTHOR_GROUP;
ALTER TABLE SCOPUS_AUTHOR_GROUP ADD CONSTRAINT SPKSCOPUS_AUTHOR_GROUP PRIMARY KEY (eid,group_sequence,author_seq);

ALTER TABLE SCOPUS_AUTHOR_GROUP DROP CONSTRAINT SFKSAUTHORG_SEQ;
ALTER TABLE SCOPUS_AUTHOR_GROUP ADD CONSTRAINT SFKSAUTHORG_SEQ FOREIGN KEY (author_seq) 
			REFERENCES SCOPUS_AUTHOR(author_seq) ON DELETE SET NULL;
			
ALTER TABLE SCOPUS_AUTHOR_GROUP DROP CONSTRAINT SFKSAUTHORG_SEQ;
ALTER TABLE SCOPUS_AUTHOR_GROUP ADD CONSTRAINT SFKSAUTHORG_SEQ FOREIGN KEY (eid,group_sequence) 
			REFERENCES SCOPUS_AFFILATION_GROUP(eid,group_sequence) ON DELETE SET NULL;
		
DROP INDEX SIDX_SAUTHORGEID ON SCOPUS_AUTHOR_GROUP;
CREATE INDEX SIDX_SAUTHORGEID ON SCOPUS_AUTHOR_GROUP (
	"EID"
);

-- SCOPUS_CLASSIFICATION_OTHER
DROP TABLE OLD_SCOPUS_CLASSIFICATION_OTHERS CASCADE CONSTRAINTS PURGE;
ALTER TABLE SCOPUS_CLASSIFICATION_OTHERS rename to OLD_SCOPUS_CLASSIFICATION_OTHERS;
ALTER TABLE BU_SCOPUS_CLASSIFICATION_OTHERS rename to SCOPUS_CLASSIFICATION_OTHERS;

ALTER TABLE SCOPUS_CLASSIFICATION_OTHERS DROP CONSTRAINT SPKSCOPUS_CLASSIFICATION_OTHERS;
ALTER TABLE SCOPUS_CLASSIFICATION_OTHERS ADD CONSTRAINT SPKSCOPUS_CLASSIFICATION_OTHERS PRIMARY KEY (eid,type,code);
			
DROP INDEX SIDX_SCOEID ON SCOPUS_CLASSIFICATION_OTHERS;
CREATE INDEX SIDX_SCOEID ON SCOPUS_CLASSIFICATION_OTHERS (
	"EID"
);

/**
 * SCOPUS 분석 테이블을 생성합니다.
 * 분석 테이블은 ASJC, ISSN, 나노에 따른 분석 테이블을 생성합니다.
 */

/* 전체대상 연도별 ISSN별 인용건수 통계 분석 테이블을 생성합니다.: 전체 문서 건수를 대상으로 한 상위 50% */
drop table SCOPUS_TOP_ISSN_CIT CASCADE CONSTRAINTS PURGE;
create table SCOPUS_TOP_ISSN_CIT AS
    SELECT eid, publication_year, P_ISSN, total_record, cit_count, ranking
    FROM
        (
        SELECT eid, publication_year, P_ISSN, total_record, cit_count as, PERCENT_RANK() OVER (partition by publication_year, P_ISSN ORDER BY cit_count desc) AS ranking
        FROM
            (
                SELECT distinct document_.eid, publication_year, P_ISSN, count(distinct document_.eid) over (partition by publication_year, P_ISSN) as total_record, cit_count
                FROM SCOPUS_SOURCE_INFO source_, SCOPUS_DOCUMENT document_
                WHERE source_.source_id = document_.source_id and document_.publication_year != 'null' and source_.source_id is not null
                order by P_ISSN, publication_year, cit_count desc
            )
        )
    WHERE ranking <= 0.5;


/* 전체대상 연도별 ASJC별 인용건수 통계 분석 테이블을 생성합니다.: 전체 문서 건수를 대상으로 한 상위 1% */
drop table SCOPUS_TOP_ASJC_CIT CASCADE CONSTRAINTS PURGE;
create table SCOPUS_TOP_ASJC_CIT AS
SELECT eid, publication_year, asjc_code, total_record, cit_count, ranking
	FROM
		(
		SELECT eid, publication_year, asjc_code, total_record, cit_count as, PERCENT_RANK() OVER (partition by publication_year, asjc_code ORDER BY cit_count desc) AS ranking
		FROM
			(
				SELECT distinct document_.eid, publication_year, asjc_code, count(distinct document_.eid) over (partition by publication_year, asjc_code) as total_record, cit_count
				FROM SCOPUS_CLASSIFICATION_ASJC asjc, SCOPUS_DOCUMENT document_
				WHERE asjc.eid = document_.eid and document_.publication_year != 'null'
			)
		)
	WHERE ranking <= 0.5;

/*
 * 나노 분석 테이블을 생성하기 전에 SCOPUS_DOCUMENT에서 제목에서 나노 키워드로 검색된 논문을 찾아서 나노 테이블을 구축합니다.
 * */
DROP TABLE SCOPUS_DOCUMENT_NANO CASCADE CONSTRAINTS PURGE;
create table SCOPUS_DOCUMENT_NANO as
  select * from scopus_document where (
  REGEXP_LIKE(title,'(^nano)', 'i') or REGEXP_LIKE(title,'[!@\*-/,."{\(@#\$\%\^\* | \s](nano)', 'i')
  --or
  --REGEXP_LIKE(abstract,'(^nano)', 'i') or REGEXP_LIKE(abstract,'[!@\*-/,."{\(@#\$\%\^\* | \s](nano)', 'i')
  )  
; 


/*
 * 추가적으로 저자 키워드에서 나노 키워드로 검색된 논문을 찾아서 나노 테이블에 대해 추가적으로 데이터를 구축합니다.
 * */
DROP TABLE SCOPUS_DOCUMENT_NANO_KEYWORD CASCADE CONSTRAINTS PURGE;
create table SCOPUS_DOCUMENT_NANO_KEYWORD as
  select *
  from scopus_document
  where eid in (
    select distinct eid from scopus_author_keyword
      where        
        REGEXP_LIKE(keyword,'(^nano)', 'i') or REGEXP_LIKE(keyword,'[!@\*-/,."{\(@#\$\%\^\* | \s](nano)', 'i')        
  ) 
; 
INSERT INTO SCOPUS_DOCUMENT_NANO(
  select *
  from SCOPUS_DOCUMENT_NANO_KEYWORD
  where eid not in (
    select distinct eid from SCOPUS_DOCUMENT_NANO  
  )
);


/*
 * 추가적으로 나노 분야에 해당하는 저널 아이디를 이용하여 해당 저널에 소속된 논문을 찾아서 나노 테이블에 대해 추가적으로 데이터를 구축합니다.
 * */
DROP TABLE SCOPUS_DOCUMENT_NANO_SOURCE CASCADE CONSTRAINTS PURGE;
create table SCOPUS_DOCUMENT_NANO_SOURCE as
(
  select *
    from scopus_document
    where 
		source_id = '11500153511'
		or source_id = '4700152612'
		or source_id = '19200156941'
		or source_id = '144782'
		or source_id = '26900'
		or source_id = '11200153548'
		or source_id = '16046'
		or source_id = '11700154398'
		or source_id = '16319'
		or source_id = '15464'
		or source_id = '5400152656'
		or source_id = '19600156908'
		or source_id = '18300156723'
		or source_id = '7700153108'
		or source_id = '19400157268'
		or source_id = '15489'
		or source_id = '21113'
		or source_id = '11700154733'
		or source_id = '13000154719'
		or source_id = '28136'
		or source_id = '5800207372'
		or source_id = '96642'
		or source_id = '7000153211'
		or source_id = '17400154831'
		or source_id = '17600155202'
		or source_id = '16088'
		or source_id = '18500166400'
		or source_id = '4000151616'
		or source_id = '19600161902'
		or source_id = '28545'
		or source_id = '9500154104'
		or source_id = '28546'
		or source_id = '28597'
		or source_id = '6100152803'
		or source_id = '130141'
		or source_id = '4500151512'
		or source_id = '11300153732'
		or source_id = '145658'
		or source_id = '19700174753'
		or source_id = '17853'
		or source_id = '17500155020'
		or source_id = '4700152457'
		or source_id = '130091'
		or source_id = '7000153207'
		or source_id = '6100152802'
		or source_id = '4000149101'
		or source_id = '19700175862'
		or source_id = '5200152801'
		or source_id = '7500153127'
		or source_id = '97953'
		or source_id = '110040'
		or source_id = '2100147401'
		or source_id = '11700154613'
		or source_id = '19700178100'
		or source_id = '5400152706'
		or source_id = '5200152704'
		or source_id = '14000156183'
		or source_id = '29112'
		or source_id = '29121'
		or source_id = '11500153308'
		or source_id = '144724'
		or source_id = '64940'
		or source_id = '11200153541'
		or source_id = '19700166902'
		or source_id = '66818'
		or source_id = '82647'
		or source_id = '71413'     
);
insert into SCOPUS_DOCUMENT_NANO(
  select *
  from SCOPUS_DOCUMENT_NANO_SOURCE
  where eid not in (
    select distinct eid from SCOPUS_DOCUMENT_NANO  
  )
);


/*
 * 구축된 나노 테이블을 활용하여 
 * 전체대상 연도별 ASJC별 인용건수 통계 분석 테이블을 생성합니다.: 나노 대상 문서 건수를 대상으로 한 상위 50% */
 * */
drop table SCOPUS_TOP_NANO_ASJC_CIT CASCADE CONSTRAINTS PURGE;
create table SCOPUS_TOP_NANO_ASJC_CIT AS
SELECT eid, publication_year, asjc_code, total_record, cit_count, ranking
	FROM
		(
		SELECT eid, publication_year, asjc_code, total_record, cit_count as, PERCENT_RANK() OVER (partition by publication_year, asjc_code ORDER BY cit_count desc) AS ranking
		FROM
			(
				SELECT distinct document_.eid, publication_year, asjc_code, count(distinct document_.eid) over (partition by publication_year, asjc_code) as total_record, cit_count
				FROM SCOPUS_CLASSIFICATION_ASJC asjc, SCOPUS_DOCUMENT_NANO document_
				WHERE asjc.eid = document_.eid and document_.publication_year != 'null'
			)
		)
	WHERE ranking <= 0.5;
